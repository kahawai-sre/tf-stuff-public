name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)
trigger: none

variables:
- name: tfWorkingDirectory
  value: './code-deploy/'
- name: netConfigDir  
  value: '../config-corenetworking'
- name: secConfigDir
  value: '../config-networkprotection'
- name: devStateBackendSubscriptionId
  value: '29c7e3d4-e589-4555-a1d8-ac60fcc05a2c'
- name: devBuildAgentPool
  value: 'acapool'
- name: terraformVersion
  value: '1.5.5'
parameters:
- name: dev_subscriptions
  type: object
  default:
  - subName: 'corp01'
    archetype: 'corp'
    tenant: 'dev-tenant'
    stageName: 'LZ_CORP_CORP01'
  - subName: 'connectivity01'
    archetype: 'connectivity'
    tenant: 'dev-tenant'
    stageName: 'LZ_CONN_CONN01'
- name: prod_subscriptions
  type: object
  default:
  - subName: 'corp01'
    archetype: 'corp'
    tenant: 'prod-tenant'
    stageName: 'LZ_CORP_CORP01'
  - subName: 'connectivity01'
    archetype: 'connectivity'
    tenant: 'prod-tenant'
    stageName: 'LZ_CONN_CONN01'

# ----- DEV STAGES ------

stages:

- stage: STG_START_DEV
  condition: always()
  jobs:
  - job: JOB_TEST
    pool: "${{ variables['devBuildAgentPool'] }}"
    steps:
      - checkout: self
      - task: Bash@3
        displayName: "Checking variable values from previous stage"
        inputs:
          targetType: 'inline'
          script: |
            echo 'Welcome'

- ${{ each subscription in parameters.dev_subscriptions }}:
  - stage: DEV_STG_VALIDATE_${{subscription.stageName}}
    dependsOn: STG_START_DEV
    condition: succeeded('STG_START_DEV')
    jobs:
      - job: 
        displayName: Validate Terraform
        pool: "${{ variables['devBuildAgentPool'] }}"
        steps:
        - checkout: self
        - task: TerraformInstaller@0
          displayName: "Install terraform version ${{ variables.terraformVersion }}"
          inputs:
            terraformVersion: '${{ variables.terraformVersion }}'
        - task: Bash@3
          displayName: 'Check dir structure'
          inputs:
            targetType: 'inline'
            script: |
              echo 'checking sub value'
              echo ${{ subscription.subName }}
              echo '$(System.DefaultWorkingDirectory)'
              echo 'view files'
              ls -lth
            #workingDirectory: '${{ variables.tfWorkingDirectory }}'
        - task: Bash@3
          displayName: 'Prepare the terraform provider files for each subscription'
          inputs:
            targetType: 'inline'
            script: |
              echo 'checking sub value'
              echo ${{ subscription.subName }}
              cp './providers/dev-tenant/'${{ subscription.subName }}'.tf' .
              cp './providers/dev-tenant/'${{ subscription.subName }}'.tfvars' .
              echo 'view files'
              ls -lth
            workingDirectory: '${{ variables.tfWorkingDirectory }}'
        - pwsh: terraform fmt -check
          displayName: Terraform Format Check
          workingDirectory: '${{ variables.tfWorkingDirectory }}'
        - pwsh: terraform init -backend=false
          displayName: Terraform Init check - no backend
          workingDirectory: '${{ variables.tfWorkingDirectory }}'
        - pwsh: terraform validate
          displayName: Terraform Validate
          workingDirectory: '${{ variables.tfWorkingDirectory }}'

  - stage: DEV_STG_PLAN_${{subscription.stageName}}
    dependsOn: DEV_STG_VALIDATE_${{subscription.stageName}}
    condition: always()
    variables: 
      netConfigPath: "${{ variables.netConfigDir }}/${{ subscription.tenant }}/${{ subscription.archetype }}/${{ subscription.subName }}"
      secConfigPath: "${{ variables.setConfigDir }}/${{ subscription.tenant }}/${{ subscription.archetype }}/${{ subscription.subName }}"
      tfVarsFileForSub: '${{ subscription.subName }}.tfvars'
      BackendServiceConnection: 'azure-sp-eslz'
      EnvironmentServiceConnection: 'azure-sp-eslz' 
      BackendRGName: 'core-resources'
      BackendStorageAcctName: 'tfstate0100'
      BackendStorageContName: 'state'
      #backendAzureRmKey: "${{ subscription.tenant }}.${{ subscription.archetype }}.tfstate"
    jobs:
      - job: JOB_INIT_PLAN_${{subscription.stageName}}
        pool: "${{ variables['devBuildAgentPool'] }}"
        steps:
        - checkout: self
        - task: Bash@3
          displayName: 'Check VARS'
          inputs:
            targetType: 'inline'
            script: |
              echo 'checking tenant value'
              echo ${{ subscription.tenant }}
              echo 'checking archetype value'
              echo ${{ subscription.archetype }}
              echo 'checking sub value'
              echo ${{ subscription.subName }}
              echo 'checking netconfigpath'
              echo $(variables.netConfigPath)
              echo 'checking secconfigpath with non-runtime syntax'
              echo ${{ variables.netConfigPath }}
              echo 'checking secconfigpath'
              echo $(variables.secConfigPath)
              echo 'checking tfVarsFileForSub'
              echo $(tfVarsFileForSub)
              ls
        - task: Bash@3
          displayName: List all Folders in $(System.DefaultWorkingDirectory)
          inputs:
            targetType: 'inline'
            script: |
              tree $(System.DefaultWorkingDirectory)
        - task: Bash@3
          displayName: List all Folders in ${{ variables.tfWorkingDirectory }}
          inputs:
            targetType: 'inline'
            script: |
              tree $(System.DefaultWorkingDirectory)
            workingDirectory: '${{ variables.tfWorkingDirectory }}'      
        - task: TerraformInstaller@0
          displayName: "Install terraform version ${{ variables.terraformVersion }}"
          inputs:
           #terraformVersion: 'latest'
            terraformVersion: '${{ variables.terraformVersion }}'
        - task: Bash@3
          displayName: 'Prepare provider.tf and subsciption.tfvars for the sub'
          inputs:
            targetType: 'inline'
            script: |
              echo 'checking sub value'
              echo ${{ subscription.subName }}
              ls -alt
              cp './providers/dev-tenant/'${{ subscription.subName }}'.tf' .
              cp './providers/dev-tenant/'${{ subscription.subName }}''.tfvars .
              echo 'view files'
              ls
              tree
              ls -alt
            workingDirectory: '${{ variables.tfWorkingDirectory }}'       
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '${{ variables.tfWorkingDirectory }}'
            backendServiceArm: '${{ variables.BackendServiceConnection }}'
            backendAzureRmResourceGroupName: '${{ variables.BackendRGName }}'
            backendAzureRmStorageAccountName: '${{ variables.BackendStorageAcctName }}'
            backendAzureRmContainerName: '${{ variables.BackendStorageContName }}'
            backendAzureRmKey: "${{ subscription.tenant }}.${{ subscription.subName }}.tfstate"
          env:
            ARM_USE_AZUREAD: true
            # terraform init -backend-config=storage_account_name=tfstate0100 -backend-config=container_name=state -backend-config=key=dev-tenant.corp.tfstate
            # -backend-config=resource_group_name=core-resources -backend-config=subscription_id=29c7e3d4-e589-4555-a1d8-ac60fcc05a2c -backend-config=tenant_id=e5216896-13b9-4e5f-8329-219f25e65d74 -backend-config=use_msi=true
        - task: TerraformTaskV4@4
          displayName: Terraform destroy
          name: STEP_TFDESTROY_${{subscription.stageName}}
          inputs:
            provider: 'azurerm'
            #https://faun.pub/azure-devops-deploying-azure-resources-using-terraform-1f2fe46c6aa0
            command: 'destroy'
            workingDirectory: '${{ variables.tfWorkingDirectory }}'
            environmentServiceNameAzureRM: '${{ variables.EnvironmentServiceConnection }}'
            backendServiceArm: '${{ variables.BackendServiceConnection }}'
            backendAzureRmResourceGroupName: '${{ variables.BackendRGName }}'
            backendAzureRmStorageAccountName: '${{ variables.BackendStorageAcctName }}'
            backendAzureRmContainerName: '${{ variables.BackendStorageContName }}'
            backendAzureRmKey: "${{ subscription.tenant }}.${{ subscription.subName }}.tfstate"
            commandOptions: '-var-file="${{ subscription.subName }}.tfvars" -auto-approve'
            publishPlanResults: ${{ subscription.tenant }}-${{ subscription.subName }}
          env:
            ARM_USE_AZUREAD: true
        